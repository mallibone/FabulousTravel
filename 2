// Copyright 2018-2019 Fabulous contributors. See LICENSE.md for license.
namespace FabulousTravel

open System.Diagnostics
open System
open Fabulous
open Fabulous.XamarinForms.LiveUpdate
open Fabulous.XamarinForms
open Xamarin.Forms

module App = 
    type City =
        { Name : string
          Country : string
          Image : string
          Rating : decimal
          Favorite : bool }

    type Model = 
      { CurrentCity : City
        Cities : City list }
        //Count : int
        //Step : int
        //TimerOn: bool }

    type Msg = 
        | City of City 
        //| Increment 
        //| Decrement 
        //| Reset
        //| SetStep of int
        //| TimerToggled of bool
        //| TimedTick

    let zurich = { Name = "Zurich"; Image = "Zurich"; Country = "Switzerland"; Rating = 5m; Favorite = true}
    let london = { Name = "London"; Image = "London"; Country = "UK"; Rating = 4.8m; Favorite = false}
    let seattle = { Name = "Seattle"; Image = "Seattle"; Country = "USA"; Rating = 4.5m; Favorite = false}

    let initModel = { CurrentCity = zurich; Cities = [zurich; london; seattle] }
    //let initModel = { CurrentCity = zurich; Cities = [ ] }

    let init () = initModel, Cmd.none

    //let timerCmd =
    //    async { do! Async.Sleep 200
    //            return TimedTick }
    //    |> Cmd.ofAsyncMsg

    let update msg model =
        match msg with
        | City selectedCity -> { model with CurrentCity = selectedCity }, Cmd.none
        //| Increment -> { model with Count = model.Count + model.Step }, Cmd.none
        //| Decrement -> { model with Count = model.Count - model.Step }, Cmd.none
        //| Reset -> init ()
        //| SetStep n -> { model with Step = n }, Cmd.none
        //| TimerToggled on -> { model with TimerOn = on }, (if on then timerCmd else Cmd.none)
        //| TimedTick -> 
        //    if model.TimerOn then 
        //        { model with Count = model.Count + model.Step }, timerCmd
        //    else 
        //        model, Cmd.none

    //type MaterialIcons =
    //    | Magnify = '\uf349'
 
    let magnify = "\uf349"
    let star = "\uf4ce"
    let heartFilled = "\uf2d1"
    let heartOutline = "\uf2d5"

    let cornerRadius = 22.

    let textColor = Color.Black
    let secondaryTextColor = Color.FromHex "FFD8D8D8"
    let backgroundColor = Color.White
    let starColor = Color.FromHex "FFFFBF00"
    let favoriteColor = Color.FromHex "FFFAACC1"

    let materialFont =
        (match Device.RuntimePlatform with
                                 | Device.iOS -> "Material Design Icons"
                                 | Device.Android -> "materialdesignicons-webfont.ttf#Material Design Icons"
                                 | _ -> null)

    let titleLabel text =
        View.Label(text = text,
            //fontSize = NamedSize.Caption,
            fontSize = 24.,
            textColor = textColor,
            verticalOptions = LayoutOptions.Center,
            fontAttributes = FontAttributes.Bold)

    let materialButton materialIcon backgroundColor textColor =
        View.Button(text = materialIcon,
            fontFamily = materialFont,
            fontSize = 20.,
            backgroundColor = backgroundColor,
            textColor = textColor)

    let ratingStar percentage =
        View.Label(text = star,
            textColor = starColor,
            fontFamily = materialFont,
            verticalOptions = LayoutOptions.Center,
            fontAttributes = FontAttributes.Bold)

    let ratingControl (rating:decimal) =
        let fullNumber = Math.Ceiling(rating)
        View.StackLayout(orientation = StackOrientation.Horizontal,
            children = [
                for i in 1m .. fullNumber -> ratingStar 1.
            ])

    let cityDescriptionFrame city =
        View.StackLayout(
            margin = Thickness(16.,0.,16.,0.),
            children = [
                View.Frame(
                    heightRequest = 256.,
                    widthRequest = 256.,
                    cornerRadius = cornerRadius,
                    padding = 0.,
                    isClippedToBounds = true,
                    content = View.Image(
                        source = city.Image,
                        aspect = Aspect.Fill)
                    )
                View.Frame(
                    heightRequest = 76.,
                    margin = Thickness(24.,-62.,24.,0.),
                    backgroundColor = Color.White,
                    cornerRadius = cornerRadius,
                    content = View.Grid(
                        rowdefs=["auto"; "auto"; "auto"],
                        coldefs=["*";"auto"],
                        children=[
                            titleLabel city.Name
                            View.Label(text = city.Country).GridRow(1).GridColumnSpan(2)
                            (ratingControl city.Rating).GridRow(2).GridColumnSpan(2)
                            ]
                    ),
                    hasShadow = true)
            ])

    let view (model: Model) dispatch =
        View.ContentPage(
            backgroundColor = backgroundColor,
            content = View.Grid(
                rowdefs = ["auto"; "auto"; "auto"; "*"],
                margin = Thickness(16.,32.,16.,0.),
                children = [
                    View.Grid(
                        coldefs = ["*"; "auto"],
                        children = [
                            (titleLabel "Destinations").GridColumn(0)
                            (materialButton magnify backgroundColor secondaryTextColor).GridColumn(1)
                        ])
                    (cityDescriptionFrame model.CurrentCity).GridRow(1)
                    //View.CarouselView(
                    //    items = [
                    //        cityDescriptionFrame
                    //        cityDescriptionFrame
                    //        cityDescriptionFrame
                    //        ]).GridRow(1)
                ]
                )
        )
        //View.ContentPage(
        //  content = View.StackLayout(padding = 20.0, verticalOptions = LayoutOptions.Center,
        //    children = [ 
        //        View.Label(text = sprintf "%d" model.Count, horizontalOptions = LayoutOptions.Center, widthRequest=200.0, horizontalTextAlignment=TextAlignment.Center)
        //        View.Button(text = "Increment", command = (fun () -> dispatch Increment), horizontalOptions = LayoutOptions.Center)
        //        View.Button(text = "Decrement", command = (fun () -> dispatch Decrement), horizontalOptions = LayoutOptions.Center)
        //        View.Label(text = "Timer", horizontalOptions = LayoutOptions.Center)
        //        View.Switch(isToggled = model.TimerOn, toggled = (fun on -> dispatch (TimerToggled on.Value)), horizontalOptions = LayoutOptions.Center)
        //        View.Slider(minimumMaximum = (0.0, 10.0), value = double model.Step, valueChanged = (fun args -> dispatch (SetStep (int (args.NewValue + 0.5)))), horizontalOptions = LayoutOptions.FillAndExpand)
        //        View.Label(text = sprintf "Step size: %d" model.Step, horizontalOptions = LayoutOptions.Center) 
        //        View.Button(text = "Reset", horizontalOptions = LayoutOptions.Center, command = (fun () -> dispatch Reset), canExecute = (model <> initModel))
        //    ]))

    // Note, this declaration is needed if you enable LiveUpdate
    let program = Program.mkProgram init update view

type App () as app = 
    inherit Application ()

    let runner = 
        App.program
#if DEBUG
        |> Program.withConsoleTrace
#endif
        |> XamarinFormsProgram.run app

#if DEBUG
    // Uncomment this line to enable live update in debug mode. 
    // See https://fsprojects.github.io/Fabulous/tools.html for further  instructions.
    //
    do runner.EnableLiveUpdate()
#endif    

    // Uncomment this code to save the application state to app.Properties using Newtonsoft.Json
    // See https://fsprojects.github.io/Fabulous/models.html for further  instructions.
#if APPSAVE
    let modelId = "model"
    override __.OnSleep() = 

        let json = Newtonsoft.Json.JsonConvert.SerializeObject(runner.CurrentModel)
        Console.WriteLine("OnSleep: saving model into app.Properties, json = {0}", json)

        app.Properties.[modelId] <- json

    override __.OnResume() = 
        Console.WriteLine "OnResume: checking for model in app.Properties"
        try 
            match app.Properties.TryGetValue modelId with
            | true, (:? string as json) -> 

                Console.WriteLine("OnResume: restoring model from app.Properties, json = {0}", json)
                let model = Newtonsoft.Json.JsonConvert.DeserializeObject<App.Model>(json)

                Console.WriteLine("OnResume: restoring model from app.Properties, model = {0}", (sprintf "%0A" model))
                runner.SetCurrentModel (model, Cmd.none)

            | _ -> ()
        with ex -> 
            App.program.onError("Error while restoring model found in app.Properties", ex)

    override this.OnStart() = 
        Console.WriteLine "OnStart: using same logic as OnResume()"
        this.OnResume()
#endif


